{
  "name": "Reusable Form Template",
  "tagline": "A Resuable Form component that can be easily plugged into any Application.",
  "body": "# Reusable Form Template\r\n\r\n## Folder Structure\r\n\r\n* root\r\n* .. images\r\n*  .. .. icons\r\n* .. javascripts\r\n* .. .. script.js\r\n* .. stylesheets\r\n* .. .. sass\r\n* .. .. .. _constants.sass\r\n* .. .. .. style.sass\r\n* .. .. style.css\r\n* template.html\r\n* readme.md\r\n\r\n## Design Strategies\r\n\r\n* I have used minimal IDs and classes, so that it wont interfere with already existing ones in the Application.\r\n* Extensively used jQuery and CSS selectors to access child elements.\r\n* All CSS properties nested under the main form id, so that the main namespace wont be polluted.\r\n* Did not use an ID or class unless required. Provide an easy way to update them in the JS file.\r\n* Using Sass precompiler, to reuse CSS properties and components.\r\n* Minimal DOM Manipulations.\r\n\r\n## Implementation\r\n\r\n* Implementing this form module is as easy as **copying** the files and adding the HTML code from *template.html* to your application.\r\n* If you are using Angular.js, the **template.html** file can be used as the templateUrl for your directive.\r\n* There is no need to change any values if you are implementing the form on different pages, but if you have a requirement for multiple forms on same page, follow the next steps below.\r\n\r\n## Next Steps\r\n\r\n* Modify the id and classes of the form in HTML code as per requirement.\r\n\r\n### JS Customizations\r\n\r\n* Update the modified values in *javascript/script.js*.\r\n* Change the variables object as per requirement. The variables object has the following keys:\r\n    * **formId**: Update the formId from the template as per usage.\r\n    * **deleteButtonClass**: Update the class if changed.\r\n    * **placeholderText**: Change this to update the placeholder text inside the text box.\r\n    * **addButtonId**: Update this value if the add to List button ID is updated.\r\n    * **submitButtonText**: Update this value to reflect the text on the submit button.\r\n    * **post URL**: The URL to which to send the post to. In the current code the stored values are send as an Array to this URL.\r\n* Depending on how the submit (POST) is handled, the $.post function on *script.js:92* needs to be modified.\r\n\r\n### CSS Customization\r\n\r\n* Change the form id in style.sass:17 or replace #myForm in style.css.\r\n* CSS Modifications can be achieved by modifying the _constants.sass using a Sass precompiler.\r\n* It is possible to change the font-stack, color schemes and other CSS properties by following the above steps.\r\n\r\n### Advanced Customizations\r\n\r\n* *script.js*: This file is very well commented, to make it easy for future updates and more features.\r\n* *style.sass*: File can be easily modified to update certain styling aspects.\r\n* *style.css*: CSS file can be modified if Sass cannot be used.\r\n* *_constants.sass*: This file can be used to store all the constants, so that future modifications can be easily performed.\r\n* *_mixins.sass*: Used to store various mixins to support style.sass.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}